{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Harbor Provider \u00b6 Summary of what the provider is for, including use cases and links to app/service documentation. Example Usage \u00b6 # example for harbor v2 api usage provider \"harborv2\" { host = \"demo.goharbor.io\" schema = \"https\" insecure = true basepath = \"/api/v2\" username = \"admin\" password = \"Harbor12345\" } # example for harbor v1 api usage provider \"harborv1\" { host = var.harbor_endpoint schema = \"https\" insecure = true basepath = var.harbor_base_path username = \"admin\" password = \"Harbor12345\" } Argument Reference \u00b6 In addition to generic provider arguments (e.g. alias and version ), the following arguments are supported in the Harbor provider block: host - (Required) Hostname from the Harbor Service. like demo.goharbor.io username - (Required) Username for authorize at the harbor. password - (Required) Password from given user. schema - (Optional) Set Used http Schema, possible values are: https,http . Default: https insecure - (Optional) Verify Https Certificates. Default: false basepath - (Optional) The Harbor Api basepath, for example use /api for default HarborV1 and /api/v2 for Harbor V2 Deployments. Default: /api Install the Custom Provider \u00b6 # for example https://github.com/nolte/terraform-provider-harbor/releases/download/release/v0.1.0/terraform-provider-harbor_v0.1.0_linux_amd64.tar.gz LATEST_LINUX_RELEASE=$(curl -sL https://api.github.com/repos/nolte/terraform-provider-harbor/releases/latest | jq -r '.assets[].browser_download_url' | grep '_linux_amd64') # direct install to your personal plugin directory wget -qO- $LATEST_LINUX_RELEASE | tar -xvz -C ~/.terraform.d/plugins/linux_amd64/ Here a link to the Terraform Doc how to install third-party-plugins","title":"Getting Started"},{"location":"#harbor-provider","text":"Summary of what the provider is for, including use cases and links to app/service documentation.","title":"Harbor Provider"},{"location":"#example-usage","text":"# example for harbor v2 api usage provider \"harborv2\" { host = \"demo.goharbor.io\" schema = \"https\" insecure = true basepath = \"/api/v2\" username = \"admin\" password = \"Harbor12345\" } # example for harbor v1 api usage provider \"harborv1\" { host = var.harbor_endpoint schema = \"https\" insecure = true basepath = var.harbor_base_path username = \"admin\" password = \"Harbor12345\" }","title":"Example Usage"},{"location":"#argument-reference","text":"In addition to generic provider arguments (e.g. alias and version ), the following arguments are supported in the Harbor provider block: host - (Required) Hostname from the Harbor Service. like demo.goharbor.io username - (Required) Username for authorize at the harbor. password - (Required) Password from given user. schema - (Optional) Set Used http Schema, possible values are: https,http . Default: https insecure - (Optional) Verify Https Certificates. Default: false basepath - (Optional) The Harbor Api basepath, for example use /api for default HarborV1 and /api/v2 for Harbor V2 Deployments. Default: /api","title":"Argument Reference"},{"location":"#install-the-custom-provider","text":"# for example https://github.com/nolte/terraform-provider-harbor/releases/download/release/v0.1.0/terraform-provider-harbor_v0.1.0_linux_amd64.tar.gz LATEST_LINUX_RELEASE=$(curl -sL https://api.github.com/repos/nolte/terraform-provider-harbor/releases/latest | jq -r '.assets[].browser_download_url' | grep '_linux_amd64') # direct install to your personal plugin directory wget -qO- $LATEST_LINUX_RELEASE | tar -xvz -C ~/.terraform.d/plugins/linux_amd64/ Here a link to the Terraform Doc how to install third-party-plugins","title":"Install the Custom Provider"},{"location":"data_sources/harbor_label/","text":"Data Source: harbor_label \u00b6 Example Usage \u00b6 data \"harbor_label\" \"label_1\" { name = \"main\" scope = \"g\" } data \"harbor_label\" \"label_2\" { id = 4 } Argument Reference \u00b6 id - (Optional, int) ID of the label. name - (Optional, string) Name of the label. scope - (Optional, string) Scope of the label. Attributes Reference \u00b6 id - (int) Unique ID of the label. name - (string) Name of the label. description - (Optional) The description of the label account will be displayed in harbor. color - (Optional) The color the label. scope - (Optional) The scope the label, p for project and g for global. project_id - (Optional) The ID of project that the label belongs to.","title":"harbor_label"},{"location":"data_sources/harbor_label/#data-source-harbor_label","text":"","title":"Data Source: harbor_label"},{"location":"data_sources/harbor_label/#example-usage","text":"data \"harbor_label\" \"label_1\" { name = \"main\" scope = \"g\" } data \"harbor_label\" \"label_2\" { id = 4 }","title":"Example Usage"},{"location":"data_sources/harbor_label/#argument-reference","text":"id - (Optional, int) ID of the label. name - (Optional, string) Name of the label. scope - (Optional, string) Scope of the label.","title":"Argument Reference"},{"location":"data_sources/harbor_label/#attributes-reference","text":"id - (int) Unique ID of the label. name - (string) Name of the label. description - (Optional) The description of the label account will be displayed in harbor. color - (Optional) The color the label. scope - (Optional) The scope the label, p for project and g for global. project_id - (Optional) The ID of project that the label belongs to.","title":"Attributes Reference"},{"location":"data_sources/harbor_project/","text":"Data Source: harbor_project \u00b6 Example Usage \u00b6 data \"harbor_project\" \"project_1\" { name = \"main\" } data \"harbor_project\" \"project_2\" { id = 4 } Argument Reference \u00b6 id - (Optional, int) ID of the project. name - (Optional, string) Name of the project. Attributes Reference \u00b6 id - (int) Unique ID of the project. name - (string) Name of the project.","title":"harbor_project"},{"location":"data_sources/harbor_project/#data-source-harbor_project","text":"","title":"Data Source: harbor_project"},{"location":"data_sources/harbor_project/#example-usage","text":"data \"harbor_project\" \"project_1\" { name = \"main\" } data \"harbor_project\" \"project_2\" { id = 4 }","title":"Example Usage"},{"location":"data_sources/harbor_project/#argument-reference","text":"id - (Optional, int) ID of the project. name - (Optional, string) Name of the project.","title":"Argument Reference"},{"location":"data_sources/harbor_project/#attributes-reference","text":"id - (int) Unique ID of the project. name - (string) Name of the project.","title":"Attributes Reference"},{"location":"data_sources/harbor_registry/","text":"Data Source: harbor_registry \u00b6 Example Usage \u00b6 data \"harbor_registry\" \"registry_1\" { name = \"main\" } data \"harbor_registry\" \"registry_2\" { id = 4 } Argument Reference \u00b6 id - (Optional, string) ID of the registry. name - (Optional, string) Name of the registry. Attributes Reference \u00b6 id - (int) Unique ID of the registry. name - (string) Name of the registry.","title":"harbor_registry"},{"location":"data_sources/harbor_registry/#data-source-harbor_registry","text":"","title":"Data Source: harbor_registry"},{"location":"data_sources/harbor_registry/#example-usage","text":"data \"harbor_registry\" \"registry_1\" { name = \"main\" } data \"harbor_registry\" \"registry_2\" { id = 4 }","title":"Example Usage"},{"location":"data_sources/harbor_registry/#argument-reference","text":"id - (Optional, string) ID of the registry. name - (Optional, string) Name of the registry.","title":"Argument Reference"},{"location":"data_sources/harbor_registry/#attributes-reference","text":"id - (int) Unique ID of the registry. name - (string) Name of the registry.","title":"Attributes Reference"},{"location":"guides/development/","text":"Development \u00b6 Visual Studio Code DevContainer \u00b6 For Easy development use Visual Studio Code DevContainer , you can find the basement from the Development Containers at nolte/vscode-devcontainers . Percondition for Use \u00b6 Create you Github Personal Access Token under github.com/settings/tokens with the following scopes: read:packages Login to fetch the required dev containers docker login docker.pkg.github.com Grab you a Coffee and wait for 3 Minutes (This happens on the first time use) Click Terminal -> New Terminal and execute the following command: make Process \u00b6 branch description master The master will only used for Presentation, and the Deployment process. tags/release/ All Created Releases must be start with a release/ prefix at the tag name. gh-pages develop feature/* fix/* Please use the develop branch for new features and fixes. Releasing \u00b6 The Github Release Assets will be automatical attatch from the build job see .github/workflows/go.yml . For a Easy Relase process we use the GitHub Commandline Interface cli.github.com . Each Release will be start from the develop branch. TBD Docs \u00b6 starting mkdocs serve and open 127.0.0.1:8000 Development Shortcuts \u00b6 build and test in one command make compile \\ && make install \\ && bats scripts/test/bats/build terraform import -var harbor_endpoint=${HARBOR_ENDPOINT} -var harbor_base_path='/api' harbor_project.main 24 Links \u00b6 writing-custom-providers","title":"Development"},{"location":"guides/development/#development","text":"","title":"Development"},{"location":"guides/development/#visual-studio-code-devcontainer","text":"For Easy development use Visual Studio Code DevContainer , you can find the basement from the Development Containers at nolte/vscode-devcontainers .","title":"Visual Studio Code DevContainer"},{"location":"guides/development/#percondition-for-use","text":"Create you Github Personal Access Token under github.com/settings/tokens with the following scopes: read:packages Login to fetch the required dev containers docker login docker.pkg.github.com Grab you a Coffee and wait for 3 Minutes (This happens on the first time use) Click Terminal -> New Terminal and execute the following command: make","title":"Percondition for Use"},{"location":"guides/development/#process","text":"branch description master The master will only used for Presentation, and the Deployment process. tags/release/ All Created Releases must be start with a release/ prefix at the tag name. gh-pages develop feature/* fix/* Please use the develop branch for new features and fixes.","title":"Process"},{"location":"guides/development/#releasing","text":"The Github Release Assets will be automatical attatch from the build job see .github/workflows/go.yml . For a Easy Relase process we use the GitHub Commandline Interface cli.github.com . Each Release will be start from the develop branch. TBD","title":"Releasing"},{"location":"guides/development/#docs","text":"starting mkdocs serve and open 127.0.0.1:8000","title":"Docs"},{"location":"guides/development/#development-shortcuts","text":"build and test in one command make compile \\ && make install \\ && bats scripts/test/bats/build terraform import -var harbor_endpoint=${HARBOR_ENDPOINT} -var harbor_base_path='/api' harbor_project.main 24","title":"Development Shortcuts"},{"location":"guides/development/#links","text":"writing-custom-providers","title":"Links"},{"location":"guides/kind/","text":"E2E Tests With Kind \u00b6 For Quick and Easy Local Development it is Recommendet to use a Vanilla Harbor installation. All releavant make goals are prefixed with e2s_* . Kind Precondition \u00b6 Manuel \u00b6 Starting the Kind Cluster with Ingress Support . COPY cat <<EOF | kind create cluster --config=- kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane kubeadmConfigPatches: - | kind: InitConfiguration nodeRegistration: kubeletExtraArgs: node-labels: \"ingress-ready=true\" extraPortMappings: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP EOF Using Nginx as Ingress Controller. kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/ingress-nginx-2.2.0/deploy/static/provider/kind/deploy.yaml or for a existing Cluster kind export kubeconfig kubectl create ns harbor Install the Harbor Chart \u00b6 Install the Helm Chart from goharbor/harbor-helm . # add helm chart repo (always done if you use the devcontainer) helm repo add harbor https://helm.goharbor.io export INGRESSDOMAIN=192-168-178-51.sslip.io helm upgrade -i tf-harbor-test harbor/harbor \\ -n harbor \\ --set expose.ingress.hosts.core=harbor.${INGRESSDOMAIN},expose.ingress.hosts.notary=notary.${INGRESSDOMAIN},externalURL=https://harbor.${INGRESSDOMAIN} # delete the chart helm delete -n harbor tf-harbor-test Using Make Goal \u00b6 # create the kind cluster with ingress and install the harbor chart make e2e_prepare # delete the kind cluster make e2e_cleanup Update the local Provider \u00b6 make install","title":"Local E2E Tests"},{"location":"guides/kind/#e2e-tests-with-kind","text":"For Quick and Easy Local Development it is Recommendet to use a Vanilla Harbor installation. All releavant make goals are prefixed with e2s_* .","title":"E2E Tests With Kind"},{"location":"guides/kind/#kind-precondition","text":"","title":"Kind Precondition"},{"location":"guides/kind/#manuel","text":"Starting the Kind Cluster with Ingress Support . COPY cat <<EOF | kind create cluster --config=- kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane kubeadmConfigPatches: - | kind: InitConfiguration nodeRegistration: kubeletExtraArgs: node-labels: \"ingress-ready=true\" extraPortMappings: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP EOF Using Nginx as Ingress Controller. kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/ingress-nginx-2.2.0/deploy/static/provider/kind/deploy.yaml or for a existing Cluster kind export kubeconfig kubectl create ns harbor","title":"Manuel"},{"location":"guides/kind/#install-the-harbor-chart","text":"Install the Helm Chart from goharbor/harbor-helm . # add helm chart repo (always done if you use the devcontainer) helm repo add harbor https://helm.goharbor.io export INGRESSDOMAIN=192-168-178-51.sslip.io helm upgrade -i tf-harbor-test harbor/harbor \\ -n harbor \\ --set expose.ingress.hosts.core=harbor.${INGRESSDOMAIN},expose.ingress.hosts.notary=notary.${INGRESSDOMAIN},externalURL=https://harbor.${INGRESSDOMAIN} # delete the chart helm delete -n harbor tf-harbor-test","title":"Install the Harbor Chart"},{"location":"guides/kind/#using-make-goal","text":"# create the kind cluster with ingress and install the harbor chart make e2e_prepare # delete the kind cluster make e2e_cleanup","title":"Using Make Goal"},{"location":"guides/kind/#update-the-local-provider","text":"make install","title":"Update the local Provider"},{"location":"resources/harbor_config_system/","text":"Resource: harbor_config_system \u00b6 Example Usage \u00b6 resource \"harbor_config_system\" \"main\" { project_creation_restriction = \"adminonly\" robot_token_expiration = 5259492 } Argument Reference \u00b6 The following arguments are supported: project_creation_restriction - (Optional) Who can create projects within Harbor. Can be \"adminonly\" or \"everyone\" robot_token_expiration - (Optional) The amount of time in mintues a robot account will expiry. NOTE: If the time is set to high you will get a 500 internal server error message when creating robot accounts","title":"harbor_config_system"},{"location":"resources/harbor_config_system/#resource-harbor_config_system","text":"","title":"Resource: harbor_config_system"},{"location":"resources/harbor_config_system/#example-usage","text":"resource \"harbor_config_system\" \"main\" { project_creation_restriction = \"adminonly\" robot_token_expiration = 5259492 }","title":"Example Usage"},{"location":"resources/harbor_config_system/#argument-reference","text":"The following arguments are supported: project_creation_restriction - (Optional) Who can create projects within Harbor. Can be \"adminonly\" or \"everyone\" robot_token_expiration - (Optional) The amount of time in mintues a robot account will expiry. NOTE: If the time is set to high you will get a 500 internal server error message when creating robot accounts","title":"Argument Reference"},{"location":"resources/harbor_configuration/","text":"Resource: harbor_config_auth \u00b6 Example Usage \u00b6 resource \"harbor_config_auth\" \"oidc\" { auth_mode = \"oidc_auth\" oidc_name = \"azure\" oidc_endpoint = \"https://login.microsoftonline.com/{GUID goes here}/v2.0\" oidc_client_id = \"OIDC Client ID goes here\" oidc_client_secret = \"ODDC Client Secret goes here\" oidc_scope = \"openid,email\" oidc_verify_cert = true } Argument Reference \u00b6 The following arguments are supported: auth_mode - (Requried) Harbor authenication mode. Can be \"oidc_auth\" or \"db_auth\" . (Default: \"db_auth\" ) oidc_name - (Optional) The name of the oidc provider name. (Required - if auth_mode set to oidc_auth ) oidc_endpoint - (Optional) The URL of an OIDC-complaint server. (Required - if auth_mode set to oidc_auth ) oidc_client_id - (Optional) The client id for the odic server. (Required - if auth_mode set to oidc_auth ) oidc_client_serect - (Optional) The client secert for the odic server. (Required - if auth_mode set to oidc_auth ) oidc_groups_claim - (Optional) The name of the claim in the token whose values is the list of group names. NOTE: \"oidc_groups_claim\" can only be used with harbor version v1.10.1 and above oidc_scope - (Optional) The scope sent to OIDC server during authentication. It has to contain \u201copenid\u201d. (Required - if auth_mode set to oidc_auth ) oidc_verify_cert - (Optional) Set to \"false\" if your OIDC server is using a self-signed certificate. (Required - if auth_mode set to oidc_auth )","title":"harbor_configuration"},{"location":"resources/harbor_configuration/#resource-harbor_config_auth","text":"","title":"Resource: harbor_config_auth"},{"location":"resources/harbor_configuration/#example-usage","text":"resource \"harbor_config_auth\" \"oidc\" { auth_mode = \"oidc_auth\" oidc_name = \"azure\" oidc_endpoint = \"https://login.microsoftonline.com/{GUID goes here}/v2.0\" oidc_client_id = \"OIDC Client ID goes here\" oidc_client_secret = \"ODDC Client Secret goes here\" oidc_scope = \"openid,email\" oidc_verify_cert = true }","title":"Example Usage"},{"location":"resources/harbor_configuration/#argument-reference","text":"The following arguments are supported: auth_mode - (Requried) Harbor authenication mode. Can be \"oidc_auth\" or \"db_auth\" . (Default: \"db_auth\" ) oidc_name - (Optional) The name of the oidc provider name. (Required - if auth_mode set to oidc_auth ) oidc_endpoint - (Optional) The URL of an OIDC-complaint server. (Required - if auth_mode set to oidc_auth ) oidc_client_id - (Optional) The client id for the odic server. (Required - if auth_mode set to oidc_auth ) oidc_client_serect - (Optional) The client secert for the odic server. (Required - if auth_mode set to oidc_auth ) oidc_groups_claim - (Optional) The name of the claim in the token whose values is the list of group names. NOTE: \"oidc_groups_claim\" can only be used with harbor version v1.10.1 and above oidc_scope - (Optional) The scope sent to OIDC server during authentication. It has to contain \u201copenid\u201d. (Required - if auth_mode set to oidc_auth ) oidc_verify_cert - (Optional) Set to \"false\" if your OIDC server is using a self-signed certificate. (Required - if auth_mode set to oidc_auth )","title":"Argument Reference"},{"location":"resources/harbor_label/","text":"Resource: harbor_label \u00b6 Harbor Doc: Managing Labels Harbor Api: /labels Example Usage \u00b6 resource \"harbor_label\" \"main\" { name = \"testlabel\" description = \"Test Label\" color = \"#61717D\" scope = \"g\" } resource \"harbor_label\" \"project_label\" { name = \"projectlabel\" description = \"Test Label for Project\" color = \"#333333\" scope = \"p\" project_id = harbor_project.main.id } Argument Reference \u00b6 The following arguments are required: name - (Required) Name of the Project. The following arguments are optional: description - (Optional) The description of the label account will be displayed in harbor. color - (Optional) The color the label. scope - (Optional) The scope the label, p for project and g for global. project_id - (Optional) The ID of project that the label belongs to, must be set if sope project. Attributes Reference \u00b6 In addition to all argument, the folloing attributes are exported: id - The id of the registry with harbor. Import \u00b6 Harbor Projects can be imported using the harbor_label , e.g. terraform import harbor_label.helmhub 1","title":"harbor_label"},{"location":"resources/harbor_label/#resource-harbor_label","text":"Harbor Doc: Managing Labels Harbor Api: /labels","title":"Resource: harbor_label"},{"location":"resources/harbor_label/#example-usage","text":"resource \"harbor_label\" \"main\" { name = \"testlabel\" description = \"Test Label\" color = \"#61717D\" scope = \"g\" } resource \"harbor_label\" \"project_label\" { name = \"projectlabel\" description = \"Test Label for Project\" color = \"#333333\" scope = \"p\" project_id = harbor_project.main.id }","title":"Example Usage"},{"location":"resources/harbor_label/#argument-reference","text":"The following arguments are required: name - (Required) Name of the Project. The following arguments are optional: description - (Optional) The description of the label account will be displayed in harbor. color - (Optional) The color the label. scope - (Optional) The scope the label, p for project and g for global. project_id - (Optional) The ID of project that the label belongs to, must be set if sope project.","title":"Argument Reference"},{"location":"resources/harbor_label/#attributes-reference","text":"In addition to all argument, the folloing attributes are exported: id - The id of the registry with harbor.","title":"Attributes Reference"},{"location":"resources/harbor_label/#import","text":"Harbor Projects can be imported using the harbor_label , e.g. terraform import harbor_label.helmhub 1","title":"Import"},{"location":"resources/harbor_project/","text":"Resource: harbor_project \u00b6 Handle a Harbor Project Ressource . Example Usage \u00b6 resource \"harbor_project\" \"main\" { name = \"main\" public = false # (Optional) Default value is false vulnerability_scanning = true # (Optional) Default vale is true. Automatically scan images on push } Argument Reference \u00b6 The following arguments are required: name - (Required) Name of the Project. The following arguments are optional: public - (Optional) Handle the access to the hosted images. Default: true If true Any user can pull images from this project. This is a convenient way for you to share repositories with others. If false Only users who are members of the project can pull images vulnerability_scanning - (Optional) Activate Vulnerability Scanning . Default: true Attributes Reference \u00b6 In addition to all arguments above, the following attributes are exported: id - Harbor Project ID. Import \u00b6 Harbor Projects can be imported using the harbor_project , e.g. $ terraform import harbor_project.main 1","title":"harbor_project"},{"location":"resources/harbor_project/#resource-harbor_project","text":"Handle a Harbor Project Ressource .","title":"Resource: harbor_project"},{"location":"resources/harbor_project/#example-usage","text":"resource \"harbor_project\" \"main\" { name = \"main\" public = false # (Optional) Default value is false vulnerability_scanning = true # (Optional) Default vale is true. Automatically scan images on push }","title":"Example Usage"},{"location":"resources/harbor_project/#argument-reference","text":"The following arguments are required: name - (Required) Name of the Project. The following arguments are optional: public - (Optional) Handle the access to the hosted images. Default: true If true Any user can pull images from this project. This is a convenient way for you to share repositories with others. If false Only users who are members of the project can pull images vulnerability_scanning - (Optional) Activate Vulnerability Scanning . Default: true","title":"Argument Reference"},{"location":"resources/harbor_project/#attributes-reference","text":"In addition to all arguments above, the following attributes are exported: id - Harbor Project ID.","title":"Attributes Reference"},{"location":"resources/harbor_project/#import","text":"Harbor Projects can be imported using the harbor_project , e.g. $ terraform import harbor_project.main 1","title":"Import"},{"location":"resources/harbor_registry/","text":"Resource: harbor_registry \u00b6 Harbor Doc: managing-registries Harbor Api: Create Example Usage \u00b6 resource \"harbor_registry\" \"helmhub\" { name = \"helmhub\" url = \"https://hub.helm.sh\" type = \"helm-hub\" description = \"Helm Hub Registry\" insecure = false } Argument Reference \u00b6 The following arguments are supported: name - (Required) The of the project that will be created in harbor. url - (Required) The registry remote endpoint, like https://hub.docker.com . type - (Required) registry Type possible values are huawei-SWR, aws-ecr, ali-acr, jfrog-artifactory, gitlab, docker-registry, docker-hub, azure-acr, quay-io, helm-hub, harbor, google-gcr . description - (Optional) The description of the registry will be displayed in harbor. insecure - (Optional) Harbor ignores insecure external registry errors. Can be set to true or false (Default: false ) Attributes Reference \u00b6 In addition to all argument, the folloing attributes are exported: id - The id of the registry with harbor. Import \u00b6 Harbor Projects can be imported using the harbor_registry , e.g. terraform import harbor_registry.helmhub 1","title":"harbor_registry"},{"location":"resources/harbor_registry/#resource-harbor_registry","text":"Harbor Doc: managing-registries Harbor Api: Create","title":"Resource: harbor_registry"},{"location":"resources/harbor_registry/#example-usage","text":"resource \"harbor_registry\" \"helmhub\" { name = \"helmhub\" url = \"https://hub.helm.sh\" type = \"helm-hub\" description = \"Helm Hub Registry\" insecure = false }","title":"Example Usage"},{"location":"resources/harbor_registry/#argument-reference","text":"The following arguments are supported: name - (Required) The of the project that will be created in harbor. url - (Required) The registry remote endpoint, like https://hub.docker.com . type - (Required) registry Type possible values are huawei-SWR, aws-ecr, ali-acr, jfrog-artifactory, gitlab, docker-registry, docker-hub, azure-acr, quay-io, helm-hub, harbor, google-gcr . description - (Optional) The description of the registry will be displayed in harbor. insecure - (Optional) Harbor ignores insecure external registry errors. Can be set to true or false (Default: false )","title":"Argument Reference"},{"location":"resources/harbor_registry/#attributes-reference","text":"In addition to all argument, the folloing attributes are exported: id - The id of the registry with harbor.","title":"Attributes Reference"},{"location":"resources/harbor_registry/#import","text":"Harbor Projects can be imported using the harbor_registry , e.g. terraform import harbor_registry.helmhub 1","title":"Import"},{"location":"resources/harbor_robot_account/","text":"Resource: harbor_robot_account \u00b6 Example Usage \u00b6 resource \"haror_project\" \"main\" { name = \"main\" } resource \"harbor_robot_account\" \"master_robot\" { name = \"god\" description = \"Robot account used to push images to harbor\" project_id = harbor_project.main.id actions = [\"docker_read\", \"docker_write\", \"helm_read\", \"helm_write\"] } output \"harbor_robot_account_token\" { value = data.harbor_robot_account.master_robot.token } Argument Reference \u00b6 The following arguments are supported: name - (Required) The of the project that will be created in harbor. description - (Optional) The description of the robot account will be displayed in harbor. project_id - (Required) The project id of the project that the robot account will be associated with. actions - (Optional) Attributes Reference \u00b6 In addition to all argument, the folloing attributes are exported: id - The id of the robot account. token - The token of the robot account. Import \u00b6 Harbor Projects can be imported using the harbor_robot_account , e.g. terraform import harbor_robot_account.master_robot 29","title":"harbor_robot_account"},{"location":"resources/harbor_robot_account/#resource-harbor_robot_account","text":"","title":"Resource: harbor_robot_account"},{"location":"resources/harbor_robot_account/#example-usage","text":"resource \"haror_project\" \"main\" { name = \"main\" } resource \"harbor_robot_account\" \"master_robot\" { name = \"god\" description = \"Robot account used to push images to harbor\" project_id = harbor_project.main.id actions = [\"docker_read\", \"docker_write\", \"helm_read\", \"helm_write\"] } output \"harbor_robot_account_token\" { value = data.harbor_robot_account.master_robot.token }","title":"Example Usage"},{"location":"resources/harbor_robot_account/#argument-reference","text":"The following arguments are supported: name - (Required) The of the project that will be created in harbor. description - (Optional) The description of the robot account will be displayed in harbor. project_id - (Required) The project id of the project that the robot account will be associated with. actions - (Optional)","title":"Argument Reference"},{"location":"resources/harbor_robot_account/#attributes-reference","text":"In addition to all argument, the folloing attributes are exported: id - The id of the robot account. token - The token of the robot account.","title":"Attributes Reference"},{"location":"resources/harbor_robot_account/#import","text":"Harbor Projects can be imported using the harbor_robot_account , e.g. terraform import harbor_robot_account.master_robot 29","title":"Import"},{"location":"resources/harbor_tasks/","text":"Resource: harbor_tasks \u00b6 Example Usage \u00b6 resource \"harbor_tasks\" \"main\" { vulnerability_scan_policy = \"daily\" } Argument Reference \u00b6 The following arguments are supported: vulnerability_scan_policy - (Optional) The frequency of the vulnerbility scanning is done. Can be to \"hourly\" , \"daily\" or \"weekly\"","title":"harbor_tasks"},{"location":"resources/harbor_tasks/#resource-harbor_tasks","text":"","title":"Resource: harbor_tasks"},{"location":"resources/harbor_tasks/#example-usage","text":"resource \"harbor_tasks\" \"main\" { vulnerability_scan_policy = \"daily\" }","title":"Example Usage"},{"location":"resources/harbor_tasks/#argument-reference","text":"The following arguments are supported: vulnerability_scan_policy - (Optional) The frequency of the vulnerbility scanning is done. Can be to \"hourly\" , \"daily\" or \"weekly\"","title":"Argument Reference"}]}